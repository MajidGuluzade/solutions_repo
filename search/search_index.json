{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Introduction Projectile motion is a fundamental concept in physics, describing the motion of an object under the influence of gravity alone, after being projected with an initial velocity. One of the key characteristics of projectile motion is the range, which depends on the angle of projection. This investigation aims to analyze how the range varies as a function of the launch angle. Theory The motion of a projectile launched from ground level can be analyzed using the equations of kinematics. The horizontal and vertical components of motion are given by: Horizontal motion: $$ x = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ where: - \\( x \\) and \\( y \\) are the horizontal and vertical displacements, respectively, - \\( v_0 \\) is the initial velocity, - \\( \\theta \\) is the angle of projection, - \\( g \\) is the acceleration due to gravity (9.81 m/s\u00b2), and - \\( t \\) is the time of flight. The time of flight \\( T \\) can be found by setting \\( y = 0 \\) : $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ The range \\( R \\) of the projectile is given by: $$ R = v_0 \\cos(\\theta) \\cdot T $$ Substituting \\( T \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range is maximized when \\( \\sin(2\\theta) \\) is maximized, which occurs at \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) . Visual Representation Figure 1: Diagram showing projectile motion with different angles of projection. Experimental Setup Objective: To investigate how the range of a projectile changes with different launch angles, keeping the initial velocity constant. Materials: A projectile launcher (with adjustable angles) A protractor (to adjust the launch angle) A measuring tape (to measure the range) A stopwatch (to measure the time of flight) A smooth launch surface A constant weight projectile (to maintain a fixed initial velocity) Procedure: Set the launcher to a fixed initial velocity. Vary the launch angle from 10\u00b0 to 90\u00b0 in increments (e.g., 10\u00b0, 20\u00b0, ..., 90\u00b0). For each launch angle, measure and record the range (horizontal distance traveled). Repeat the trials for each angle to ensure consistency and calculate the average range. Plot the range as a function of the launch angle. Expected Results: The range will be highest at a launch angle of 45\u00b0 (the optimal angle for maximum range in projectile motion). As the angle approaches 90\u00b0, the range decreases, following the standard projectile motion pattern. Graphical Representation: Figure 2: Projectile motion at different launch angles (showing the range and path at varying angles). Differential Equations: The motion of a projectile can be described by solving the differential equations for horizontal and vertical motions simultaneously. Relationship Between Range and Launch Angle: The range \\( R \\) of a projectile is maximized at \\( 45^\\circ \\) . Impact of Initial Velocity and Gravity: Initial velocity : Increasing \\( v_0 \\) increases the range. Gravitational acceleration : Decreasing \\( g \\) increases the range. Practical Applications: Air Resistance: The drag force affects the motion and range. Formula : $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$ Uneven Terrain: When the projectile is launched on an inclined surface, the angle of launch must be adjusted accordingly. Real-World Applications: Sports : Understanding projectile motion is vital for optimizing shots in sports like golf, soccer, and basketball. Engineering : Accurate prediction of projectile paths is essential in fields like ballistics and artillery design. Implementation: To simulate projectile motion and calculate the range for different angles, we can use Python. Below is a simple Python code to calculate the range of a projectile for various launch angles. import numpy as np import matplotlib.pyplot as plt # Constants v0 = 30 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Function to calculate range def calculate_range(v0, angle, g): angle_rad = np.radians(angle) R = (v0**2 * np.sin(2 * angle_rad)) / g return R # Angles of projection angles = np.arange(1, 91, 1) # From 1\u00b0 to 90\u00b0 # Calculate ranges for each angle ranges = [calculate_range(v0, angle, g) for angle in angles] # Plotting the results plt.plot(angles, ranges) plt.title(\"Projectile Range vs Launch Angle\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.show() Figure 3: Graphical Representation of Python Script. Conclusion The investigation confirms the theoretical prediction that the range of a projectile follows a sinusoidal dependence on the angle of projection, with a maximum at 45\u00b0. This study is essential in applications such as ballistics, sports, and engineering. Further Investigation Exploring the effects of air resistance. Analyzing projectile motion on inclined planes. Extending the study to different launch heights.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#introduction","text":"Projectile motion is a fundamental concept in physics, describing the motion of an object under the influence of gravity alone, after being projected with an initial velocity. One of the key characteristics of projectile motion is the range, which depends on the angle of projection. This investigation aims to analyze how the range varies as a function of the launch angle.","title":"Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theory","text":"The motion of a projectile launched from ground level can be analyzed using the equations of kinematics. The horizontal and vertical components of motion are given by: Horizontal motion: $$ x = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ where: - \\( x \\) and \\( y \\) are the horizontal and vertical displacements, respectively, - \\( v_0 \\) is the initial velocity, - \\( \\theta \\) is the angle of projection, - \\( g \\) is the acceleration due to gravity (9.81 m/s\u00b2), and - \\( t \\) is the time of flight. The time of flight \\( T \\) can be found by setting \\( y = 0 \\) : $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ The range \\( R \\) of the projectile is given by: $$ R = v_0 \\cos(\\theta) \\cdot T $$ Substituting \\( T \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range is maximized when \\( \\sin(2\\theta) \\) is maximized, which occurs at \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) .","title":"Theory"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#visual-representation","text":"Figure 1: Diagram showing projectile motion with different angles of projection.","title":"Visual Representation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#experimental-setup","text":"","title":"Experimental Setup"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#objective","text":"To investigate how the range of a projectile changes with different launch angles, keeping the initial velocity constant.","title":"Objective:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#materials","text":"A projectile launcher (with adjustable angles) A protractor (to adjust the launch angle) A measuring tape (to measure the range) A stopwatch (to measure the time of flight) A smooth launch surface A constant weight projectile (to maintain a fixed initial velocity)","title":"Materials:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#procedure","text":"Set the launcher to a fixed initial velocity. Vary the launch angle from 10\u00b0 to 90\u00b0 in increments (e.g., 10\u00b0, 20\u00b0, ..., 90\u00b0). For each launch angle, measure and record the range (horizontal distance traveled). Repeat the trials for each angle to ensure consistency and calculate the average range. Plot the range as a function of the launch angle.","title":"Procedure:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#expected-results","text":"The range will be highest at a launch angle of 45\u00b0 (the optimal angle for maximum range in projectile motion). As the angle approaches 90\u00b0, the range decreases, following the standard projectile motion pattern.","title":"Expected Results:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-representation","text":"Figure 2: Projectile motion at different launch angles (showing the range and path at varying angles).","title":"Graphical Representation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#differential-equations","text":"The motion of a projectile can be described by solving the differential equations for horizontal and vertical motions simultaneously.","title":"Differential Equations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#relationship-between-range-and-launch-angle","text":"The range \\( R \\) of a projectile is maximized at \\( 45^\\circ \\) .","title":"Relationship Between Range and Launch Angle:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#impact-of-initial-velocity-and-gravity","text":"Initial velocity : Increasing \\( v_0 \\) increases the range. Gravitational acceleration : Decreasing \\( g \\) increases the range.","title":"Impact of Initial Velocity and Gravity:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"","title":"Practical Applications:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#air-resistance","text":"The drag force affects the motion and range. Formula : $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$","title":"Air Resistance:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#uneven-terrain","text":"When the projectile is launched on an inclined surface, the angle of launch must be adjusted accordingly.","title":"Uneven Terrain:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#real-world-applications","text":"Sports : Understanding projectile motion is vital for optimizing shots in sports like golf, soccer, and basketball. Engineering : Accurate prediction of projectile paths is essential in fields like ballistics and artillery design.","title":"Real-World Applications:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"To simulate projectile motion and calculate the range for different angles, we can use Python. Below is a simple Python code to calculate the range of a projectile for various launch angles. import numpy as np import matplotlib.pyplot as plt # Constants v0 = 30 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Function to calculate range def calculate_range(v0, angle, g): angle_rad = np.radians(angle) R = (v0**2 * np.sin(2 * angle_rad)) / g return R # Angles of projection angles = np.arange(1, 91, 1) # From 1\u00b0 to 90\u00b0 # Calculate ranges for each angle ranges = [calculate_range(v0, angle, g) for angle in angles] # Plotting the results plt.plot(angles, ranges) plt.title(\"Projectile Range vs Launch Angle\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.show() Figure 3: Graphical Representation of Python Script.","title":"Implementation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The investigation confirms the theoretical prediction that the range of a projectile follows a sinusoidal dependence on the angle of projection, with a maximum at 45\u00b0. This study is essential in applications such as ballistics, sports, and engineering.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#further-investigation","text":"Exploring the effects of air resistance. Analyzing projectile motion on inclined planes. Extending the study to different launch heights.","title":"Further Investigation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a fascinating physical system exhibiting complex behavior due to the interplay of damping, restoring forces, and external driving forces. By incorporating periodic forcing, the system can display resonance, quasiperiodic motion, and even chaos. These behaviors have practical applications in mechanical engineering, climate systems, and nonlinear oscillators. Theoretical Foundation The motion of a forced damped pendulum is governed by the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( \\omega_0 \\) is the natural frequency of the pendulum, - \\( A \\) is the amplitude of the external force, - \\( \\omega \\) is the driving frequency. Small-Angle Approximation For small oscillations ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This equation describes a damped, driven harmonic oscillator. Resonance Conditions Resonance occurs when the external driving frequency matches the system\u2019s natural frequency: \\[ \\omega = \\omega_0 \\] At resonance, energy transfer is maximized, leading to large amplitude oscillations. Analysis of Dynamics Effect of Parameters: Damping Coefficient \\( b \\) : High damping suppresses oscillations, while low damping allows sustained motion. Driving Amplitude \\( A \\) : Higher amplitudes can lead to chaotic motion at certain frequencies. Driving Frequency \\( \\omega \\) : When near resonance, even small forces can lead to significant oscillations. Transition to Chaos: For certain parameter values, the pendulum enters a chaotic regime, characterized by: - Aperiodic motion - Sensitive dependence on initial conditions - Strange attractors in phase space This is a hallmark of nonlinear dynamical systems. Practical Applications The forced damped pendulum model applies to various real-world systems: - Energy Harvesting : Oscillators that extract energy from vibrations. - Suspension Bridges : Understanding how periodic forces can induce resonance. - Oscillating Circuits : Electrical analogs of mechanical driven oscillators. Implementation Computational Model Below is a Python script to simulate the motion of a forced damped pendulum using numerical integration. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants beta = 0.5 # Damping coefficient omega0 = 1.5 # Natural frequency F = 1.2 # Driving force amplitude omega = 2.0 # Driving frequency # Define the differential equation def forced_damped_pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -beta * omega_theta - omega0**2 * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 # Initial angle (radians) omega0 = 0.0 # Initial angular velocity y0 = [theta0, omega0] # Time span t_span = (0, 50) t_eval = np.linspace(0, 50, 5000) # Increase resolution for better accuracy # Solve ODE once over the full time span solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval) # Extract solutions theta_vals = solution.y[0] omega_vals = solution.y[1] time_vals = solution.t # Plotting Time Series plt.figure(figsize=(10, 5)) plt.plot(time_vals, theta_vals, label=\"Theta (radians)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (radians)\") plt.title(\"Time Evolution of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.savefig(\"forced_damped_pendulum_time_series.png\", dpi=300) plt.show() # Phase Space Plot plt.figure(figsize=(7, 7)) plt.plot(theta_vals, omega_vals, color='blue') plt.xlabel(\"Theta (radians)\") plt.ylabel(\"Angular Velocity (d\u03b8/dt)\") plt.title(\"Phase Space of the Forced Damped Pendulum\") plt.grid() plt.savefig(\"forced_damped_pendulum_phase_space.png\", dpi=300) plt.show() # Poincar\u00e9 Section - Sample points at fixed intervals poincare_t = np.arange(0, 50, 2 * np.pi / omega) # Sample at multiples of driving period poincare_indices = [np.argmin(np.abs(time_vals - t)) for t in poincare_t] # Find nearest indices poincare_theta = theta_vals[poincare_indices] poincare_omega = omega_vals[poincare_indices] # Plot Poincar\u00e9 Map plt.figure(figsize=(7, 7)) plt.scatter(poincare_theta, poincare_omega, color='red', s=10) plt.xlabel(\"Theta (radians)\") plt.ylabel(\"Angular Velocity (d\u03b8/dt)\") plt.title(\"Poincar\u00e9 Section of the Forced Damped Pendulum\") plt.grid() plt.savefig(\"forced_damped_poincare_section.png\", dpi=300) plt.show() Visual Representation Figure 1: Time Evolution Graph. Figure 2: Phase Space Diagram. Figure 3: Poincar\u00e9 Section.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a fascinating physical system exhibiting complex behavior due to the interplay of damping, restoring forces, and external driving forces. By incorporating periodic forcing, the system can display resonance, quasiperiodic motion, and even chaos. These behaviors have practical applications in mechanical engineering, climate systems, and nonlinear oscillators.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( \\omega_0 \\) is the natural frequency of the pendulum, - \\( A \\) is the amplitude of the external force, - \\( \\omega \\) is the driving frequency.","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This equation describes a damped, driven harmonic oscillator.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"Resonance occurs when the external driving frequency matches the system\u2019s natural frequency: \\[ \\omega = \\omega_0 \\] At resonance, energy transfer is maximized, leading to large amplitude oscillations.","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-parameters","text":"Damping Coefficient \\( b \\) : High damping suppresses oscillations, while low damping allows sustained motion. Driving Amplitude \\( A \\) : Higher amplitudes can lead to chaotic motion at certain frequencies. Driving Frequency \\( \\omega \\) : When near resonance, even small forces can lead to significant oscillations.","title":"Effect of Parameters:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For certain parameter values, the pendulum enters a chaotic regime, characterized by: - Aperiodic motion - Sensitive dependence on initial conditions - Strange attractors in phase space This is a hallmark of nonlinear dynamical systems.","title":"Transition to Chaos:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"The forced damped pendulum model applies to various real-world systems: - Energy Harvesting : Oscillators that extract energy from vibrations. - Suspension Bridges : Understanding how periodic forces can induce resonance. - Oscillating Circuits : Electrical analogs of mechanical driven oscillators.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#computational-model","text":"Below is a Python script to simulate the motion of a forced damped pendulum using numerical integration. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants beta = 0.5 # Damping coefficient omega0 = 1.5 # Natural frequency F = 1.2 # Driving force amplitude omega = 2.0 # Driving frequency # Define the differential equation def forced_damped_pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -beta * omega_theta - omega0**2 * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 # Initial angle (radians) omega0 = 0.0 # Initial angular velocity y0 = [theta0, omega0] # Time span t_span = (0, 50) t_eval = np.linspace(0, 50, 5000) # Increase resolution for better accuracy # Solve ODE once over the full time span solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval) # Extract solutions theta_vals = solution.y[0] omega_vals = solution.y[1] time_vals = solution.t # Plotting Time Series plt.figure(figsize=(10, 5)) plt.plot(time_vals, theta_vals, label=\"Theta (radians)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (radians)\") plt.title(\"Time Evolution of the Forced Damped Pendulum\") plt.legend() plt.grid() plt.savefig(\"forced_damped_pendulum_time_series.png\", dpi=300) plt.show() # Phase Space Plot plt.figure(figsize=(7, 7)) plt.plot(theta_vals, omega_vals, color='blue') plt.xlabel(\"Theta (radians)\") plt.ylabel(\"Angular Velocity (d\u03b8/dt)\") plt.title(\"Phase Space of the Forced Damped Pendulum\") plt.grid() plt.savefig(\"forced_damped_pendulum_phase_space.png\", dpi=300) plt.show() # Poincar\u00e9 Section - Sample points at fixed intervals poincare_t = np.arange(0, 50, 2 * np.pi / omega) # Sample at multiples of driving period poincare_indices = [np.argmin(np.abs(time_vals - t)) for t in poincare_t] # Find nearest indices poincare_theta = theta_vals[poincare_indices] poincare_omega = omega_vals[poincare_indices] # Plot Poincar\u00e9 Map plt.figure(figsize=(7, 7)) plt.scatter(poincare_theta, poincare_omega, color='red', s=10) plt.xlabel(\"Theta (radians)\") plt.ylabel(\"Angular Velocity (d\u03b8/dt)\") plt.title(\"Poincar\u00e9 Section of the Forced Damped Pendulum\") plt.grid() plt.savefig(\"forced_damped_poincare_section.png\", dpi=300) plt.show()","title":"Computational Model"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#visual-representation","text":"Figure 1: Time Evolution Graph. Figure 2: Phase Space Diagram. Figure 3: Poincar\u00e9 Section.","title":"Visual Representation"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Motivation Kepler's Third Law of Planetary Motion states that the square of the orbital period ( \\( T \\) ) of a planet is directly proportional to the cube of its orbital radius ( \\( r \\) ). This is an essential relationship in celestial mechanics, providing insight into the motions of planets, satellites, and even artificial satellites. The law allows us to understand how the gravitational forces between celestial bodies determine their orbital characteristics. Kepler's Third Law can also be generalized to include the mass of the central object, which governs the dynamics of the orbit. It provides a critical tool in astronomy, especially in determining the properties of distant celestial objects like exoplanets, as well as the behavior of natural and artificial satellites. Derivation of Kepler's Third Law For a body in a circular orbit around a central mass \\( M \\) , the gravitational force ( \\( F_g \\) ) provides the necessary centripetal force ( \\( F_c \\) ) to maintain the orbit: The gravitational force is given by: $$ F_g = \\frac{G M m}{r^2} $$ where: - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body, - \\( m \\) is the mass of the orbiting object, - \\( r \\) is the orbital radius. The centripetal force required to maintain the orbit is given by: $$ F_c = \\frac{m v^2}{r} $$ where: - \\( v \\) is the orbital velocity of the body. Setting the gravitational force equal to the centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) from both sides and solving for \\( v^2 \\) : \\[ v^2 = \\frac{G M}{r} \\] Now, the orbital period \\( T \\) , which is the time it takes for the body to complete one full orbit, is related to the orbital velocity by: \\[ T = \\frac{2\\pi r}{v} \\] Substitute the expression for \\( v \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} \\] Simplifying the equation: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides to eliminate the square root: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\] This final equation confirms the fundamental relationship: \\[ T^2 \\propto r^3 \\] This result means that if you plot \\( T^2 \\) versus \\( r^3 \\) for any orbiting object, the graph will produce a straight line, and the proportionality constant depends on the mass of the central body. Applications in Astronomy Kepler's Third Law is crucial for several astronomical applications: Planetary Orbital Analysis : It allows astronomers to calculate the orbital period and radius of planets in the solar system or exoplanets in distant star systems. Satellite Orbit Calculations : For artificial satellites, this law helps to predict their orbital period given the radius from the Earth's center. Exoplanet Detection : When a planet passes in front of its host star (a transit event), astronomers can measure the time between transits to estimate the orbital period. From there, the orbital radius can be inferred using Kepler's Third Law. Gravitational Dynamics : The relationship is also used in understanding binary star systems, where the orbital period of the stars can help determine the system's mass and size. Computational Model To verify Kepler's Third Law and simulate the relationship between the orbital period and orbital radius, we use the following Python script. The script calculates the orbital period for varying orbital radii and plots \\( T^2 \\) against \\( r^3 \\) to show that they are indeed proportional. Figure 1: Two notions of distance for the problem of learning Kepler\u2019s third law of planetary motion from solar-system. import numpy as np import matplotlib.pyplot as plt def orbital_period(radius, mass_central): G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) return 2 * np.pi * np.sqrt(radius**3 / (G * mass_central)) # Define parameters mass_earth = 5.972e24 # kg (Mass of Earth) radii = np.linspace(7e6, 4.2e7, 100) # Varying orbital radii (m) radii_array = np.array(radii) # Convert radii to a NumPy array periods = np.array([orbital_period(r, mass_earth) for r in radii_array]) # Convert periods to NumPy array # Verify Kepler's Third Law plt.figure(figsize=(8, 6)) plt.plot(radii_array**3, periods**2, label=\"$T^2$ vs $r^3$\") plt.xlabel(\"$r^3$ (m^3)\") plt.ylabel(\"$T^2$ (s^2)\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.savefig(\"verification_of_Kepler's_Third_Law.png\", dpi=300) plt.show() Visual Representation Figure 2: Verification of Kepler's Third Law.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law of Planetary Motion states that the square of the orbital period ( \\( T \\) ) of a planet is directly proportional to the cube of its orbital radius ( \\( r \\) ). This is an essential relationship in celestial mechanics, providing insight into the motions of planets, satellites, and even artificial satellites. The law allows us to understand how the gravitational forces between celestial bodies determine their orbital characteristics. Kepler's Third Law can also be generalized to include the mass of the central object, which governs the dynamics of the orbit. It provides a critical tool in astronomy, especially in determining the properties of distant celestial objects like exoplanets, as well as the behavior of natural and artificial satellites.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"For a body in a circular orbit around a central mass \\( M \\) , the gravitational force ( \\( F_g \\) ) provides the necessary centripetal force ( \\( F_c \\) ) to maintain the orbit: The gravitational force is given by: $$ F_g = \\frac{G M m}{r^2} $$ where: - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body, - \\( m \\) is the mass of the orbiting object, - \\( r \\) is the orbital radius. The centripetal force required to maintain the orbit is given by: $$ F_c = \\frac{m v^2}{r} $$ where: - \\( v \\) is the orbital velocity of the body. Setting the gravitational force equal to the centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) from both sides and solving for \\( v^2 \\) : \\[ v^2 = \\frac{G M}{r} \\] Now, the orbital period \\( T \\) , which is the time it takes for the body to complete one full orbit, is related to the orbital velocity by: \\[ T = \\frac{2\\pi r}{v} \\] Substitute the expression for \\( v \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} \\] Simplifying the equation: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides to eliminate the square root: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\] This final equation confirms the fundamental relationship: \\[ T^2 \\propto r^3 \\] This result means that if you plot \\( T^2 \\) versus \\( r^3 \\) for any orbiting object, the graph will produce a straight line, and the proportionality constant depends on the mass of the central body.","title":"Derivation of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications-in-astronomy","text":"Kepler's Third Law is crucial for several astronomical applications: Planetary Orbital Analysis : It allows astronomers to calculate the orbital period and radius of planets in the solar system or exoplanets in distant star systems. Satellite Orbit Calculations : For artificial satellites, this law helps to predict their orbital period given the radius from the Earth's center. Exoplanet Detection : When a planet passes in front of its host star (a transit event), astronomers can measure the time between transits to estimate the orbital period. From there, the orbital radius can be inferred using Kepler's Third Law. Gravitational Dynamics : The relationship is also used in understanding binary star systems, where the orbital period of the stars can help determine the system's mass and size.","title":"Applications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-model","text":"To verify Kepler's Third Law and simulate the relationship between the orbital period and orbital radius, we use the following Python script. The script calculates the orbital period for varying orbital radii and plots \\( T^2 \\) against \\( r^3 \\) to show that they are indeed proportional. Figure 1: Two notions of distance for the problem of learning Kepler\u2019s third law of planetary motion from solar-system. import numpy as np import matplotlib.pyplot as plt def orbital_period(radius, mass_central): G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) return 2 * np.pi * np.sqrt(radius**3 / (G * mass_central)) # Define parameters mass_earth = 5.972e24 # kg (Mass of Earth) radii = np.linspace(7e6, 4.2e7, 100) # Varying orbital radii (m) radii_array = np.array(radii) # Convert radii to a NumPy array periods = np.array([orbital_period(r, mass_earth) for r in radii_array]) # Convert periods to NumPy array # Verify Kepler's Third Law plt.figure(figsize=(8, 6)) plt.plot(radii_array**3, periods**2, label=\"$T^2$ vs $r^3$\") plt.xlabel(\"$r^3$ (m^3)\") plt.ylabel(\"$T^2$ (s^2)\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.savefig(\"verification_of_Kepler's_Third_Law.png\", dpi=300) plt.show()","title":"Computational Model"},{"location":"1%20Physics/2%20Gravity/Problem_1/#visual-representation","text":"Figure 2: Verification of Kepler's Third Law.","title":"Visual Representation"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities Motivation The concept of escape velocity is fundamental in understanding the speed needed for an object to break free from a celestial body's gravitational influence. Building on this, the first, second, and third cosmic velocities define the speeds necessary to: 1. Achieve Orbit (first cosmic velocity), 2. Escape the Gravitational Influence (second cosmic velocity), and 3. Escape the Star System (third cosmic velocity). These velocities are essential for planning space missions, whether for launching satellites, interplanetary travel, or potential future interstellar missions. Cosmic Velocities 1. First Cosmic Velocity ( \\(v_1\\) ): Orbital Velocity The first cosmic velocity is the speed needed for an object to achieve a stable circular orbit around a celestial body. It is the minimum velocity required to keep an object in orbit without falling back to the surface. The formula for the first cosmic velocity is: \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\] where: - \\( G \\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2} \\) ), - \\( M \\) is the mass of the celestial body (kg), - \\( r \\) is the radius of the orbit (m). 2. Second Cosmic Velocity ( \\(v_2\\) ): Escape Velocity The second cosmic velocity is the speed required to escape a celestial body's gravitational field without any further propulsion. An object at this velocity will move away from the body indefinitely. The formula for the second cosmic velocity is: \\[ v_2 = \\sqrt{\\frac{2 G M}{r}} \\] 3. Third Cosmic Velocity ( \\(v_3\\) ): Escape the Star System The third cosmic velocity is the speed required to escape the gravitational influence of the central star (e.g., the Sun for planets in our solar system). It is the velocity needed to break free from the entire star system. The formula for the third cosmic velocity is: \\[ v_3 = \\sqrt{\\frac{3 G M}{r}} \\] where: - \\( M \\) is the mass of the star (e.g., the Sun for our solar system), - \\( r \\) is the distance from the center of the star (in the case of Earth, this is the distance from Earth to the Sun). Calculation and Visualization for Various Celestial Bodies We will now calculate the first, second, and third cosmic velocities for different celestial bodies such as Earth, Mars, and Jupiter. Python Script for Calculations and Visualizations import numpy as np import matplotlib.pyplot as plt # Gravitational constant (m^3 kg^-1 s^-2) G = 6.67430e-11 # Define the masses (kg) and radii (m) of Earth, Mars, and Jupiter celestial_bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 6.4171e23, 'radius': 3.396e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.991e7} } # Function to calculate velocities def cosmic_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity v3 = np.sqrt(3 * G * mass / radius) # Third cosmic velocity return v1, v2, v3 # Store velocities for each celestial body velocities = {} for body, data in celestial_bodies.items(): velocities[body] = cosmic_velocities(data['mass'], data['radius']) # Plot the velocities bodies = list(celestial_bodies.keys()) v1_vals = [velocities[body][0] for body in bodies] v2_vals = [velocities[body][1] for body in bodies] v3_vals = [velocities[body][2] for body in bodies] plt.figure(figsize=(10, 6)) plt.bar(bodies, v1_vals, width=0.2, label=\"First Cosmic Velocity (Orbital)\", align='center') plt.bar(bodies, v2_vals, width=0.2, label=\"Second Cosmic Velocity (Escape)\", align='edge') plt.bar(bodies, v3_vals, width=0.2, label=\"Third Cosmic Velocity (Escape Star System)\", align='edge') plt.xlabel(\"Celestial Bodies\") plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Various Celestial Bodies\") plt.legend() plt.grid(True) plt.show()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"The concept of escape velocity is fundamental in understanding the speed needed for an object to break free from a celestial body's gravitational influence. Building on this, the first, second, and third cosmic velocities define the speeds necessary to: 1. Achieve Orbit (first cosmic velocity), 2. Escape the Gravitational Influence (second cosmic velocity), and 3. Escape the Star System (third cosmic velocity). These velocities are essential for planning space missions, whether for launching satellites, interplanetary travel, or potential future interstellar missions.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities","text":"","title":"Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-v_1-orbital-velocity","text":"The first cosmic velocity is the speed needed for an object to achieve a stable circular orbit around a celestial body. It is the minimum velocity required to keep an object in orbit without falling back to the surface. The formula for the first cosmic velocity is: \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\] where: - \\( G \\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2} \\) ), - \\( M \\) is the mass of the celestial body (kg), - \\( r \\) is the radius of the orbit (m).","title":"1. First Cosmic Velocity (\\(v_1\\)): Orbital Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-v_2-escape-velocity","text":"The second cosmic velocity is the speed required to escape a celestial body's gravitational field without any further propulsion. An object at this velocity will move away from the body indefinitely. The formula for the second cosmic velocity is: \\[ v_2 = \\sqrt{\\frac{2 G M}{r}} \\]","title":"2. Second Cosmic Velocity (\\(v_2\\)): Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity-v_3-escape-the-star-system","text":"The third cosmic velocity is the speed required to escape the gravitational influence of the central star (e.g., the Sun for planets in our solar system). It is the velocity needed to break free from the entire star system. The formula for the third cosmic velocity is: \\[ v_3 = \\sqrt{\\frac{3 G M}{r}} \\] where: - \\( M \\) is the mass of the star (e.g., the Sun for our solar system), - \\( r \\) is the distance from the center of the star (in the case of Earth, this is the distance from Earth to the Sun).","title":"3. Third Cosmic Velocity (\\(v_3\\)): Escape the Star System"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculation-and-visualization-for-various-celestial-bodies","text":"We will now calculate the first, second, and third cosmic velocities for different celestial bodies such as Earth, Mars, and Jupiter.","title":"Calculation and Visualization for Various Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-script-for-calculations-and-visualizations","text":"import numpy as np import matplotlib.pyplot as plt # Gravitational constant (m^3 kg^-1 s^-2) G = 6.67430e-11 # Define the masses (kg) and radii (m) of Earth, Mars, and Jupiter celestial_bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 6.4171e23, 'radius': 3.396e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.991e7} } # Function to calculate velocities def cosmic_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity v3 = np.sqrt(3 * G * mass / radius) # Third cosmic velocity return v1, v2, v3 # Store velocities for each celestial body velocities = {} for body, data in celestial_bodies.items(): velocities[body] = cosmic_velocities(data['mass'], data['radius']) # Plot the velocities bodies = list(celestial_bodies.keys()) v1_vals = [velocities[body][0] for body in bodies] v2_vals = [velocities[body][1] for body in bodies] v3_vals = [velocities[body][2] for body in bodies] plt.figure(figsize=(10, 6)) plt.bar(bodies, v1_vals, width=0.2, label=\"First Cosmic Velocity (Orbital)\", align='center') plt.bar(bodies, v2_vals, width=0.2, label=\"Second Cosmic Velocity (Escape)\", align='edge') plt.bar(bodies, v3_vals, width=0.2, label=\"Third Cosmic Velocity (Escape Star System)\", align='edge') plt.xlabel(\"Celestial Bodies\") plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Various Celestial Bodies\") plt.legend() plt.grid(True) plt.show()","title":"Python Script for Calculations and Visualizations"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}